from flask import render_template, url_for, flash, redirect, request
from flaskmessenger.forms import RegistrationForm, LoginForm
from flaskmessenger import app, db, bcrypt
from flaskmessenger.models import User, Post
from flask_login import login_user, current_user, logout_user, login_required

# dummy date to iterate through using jinja for loop.
posts = [
    {
        'author': 'John Doe',
        'title': 'Message 1',
        'content': 'First post content',
        'date_posted': 'November 27th, 2023'
    },
    {
        'author': 'Jane Doe',
        'title': 'Message 2',
        'content': 'Second post content',
        'date_posted': 'November 27th, 2023'
    }
]


@app.route("/")
def base():
    return render_template('base.html')


@app.route("/home")
def home():
    return render_template('home.html', posts=posts)


@app.route("/about")
def about():
    return render_template('about.html', title='About')


@app.route("/register", methods=['GET', 'POST'])
def register():
    # conditional to stop user going back to register/login page via the navbar from home page
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = RegistrationForm()
    # conditional to validate a successful registration
    if form.validate_on_submit():
        # variable to hash a password generated by the bcrypt class
        hashed_pw = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        # creates a new user of the User model to be stored on the database
        user = User(username=form.username.data, email=form.email.data, password=hashed_pw)
        db.session.add(user)
        db.session.commit()
        # 'alert-message' css class to help validate a successful registration 
        flash(f'Your account has now been created! You are now logged in', 'alert-message')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
    # conditional to stop user going back to register/login page via the navbar from home page
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    form = LoginForm()
    # conditional to validate successful login
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user, remember=form.remember.data)
            # ternary conditional 
            next_pg = request.args.get('next')
            return redirect(next_pg) if next_pg else redirect(url_for('home'))
        else:
            # 'warning' css class to highlight an unsuccessful login attempt 
            flash('Login Unsuccessful! Please check email and password', 'warning')  
    return render_template("login.html", title='Login', form=form)


@app.route("/logout")
def logout():
    # logout route based on the logout_user class imported from login_user extension
    logout_user()
    return redirect(url_for('home'))


@app.route("/account")
# login required decorator added to route from the imported login_user extension
@login_required
def account():
    return render_template('account.html', title='Account')